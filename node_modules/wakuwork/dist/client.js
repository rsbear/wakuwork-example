import{cache,use,useEffect,useState}from"react";import RSDWClient from"react-server-dom-webpack/client";const{createFromFetch,encodeReply}=RSDWClient;const basePath="/";export function serve(rscId){const fetchRSC=cache(serializedProps=>{let rerender;const setRerender=fn=>{rerender=fn;return()=>{rerender=undefined}};const searchParams=new URLSearchParams;searchParams.set("props",serializedProps);const options={async callServer(rsfId,args){const isMutating=!!mutationMode;const searchParams=new URLSearchParams;searchParams.set("action_id",rsfId);let rscPath="RSC/";if(isMutating){rscPath+=rscId;searchParams.set("props",serializedProps)}else{rscPath+="_"}const response=fetch(basePath+rscPath+"/"+searchParams,{method:"POST",body:await encodeReply(args)});const data=createFromFetch(response,options);if(isMutating){rerender?.([data,serializedProps])}return data}};const prefetched=globalThis.__WAKUWORK_PREFETCHED__?.[rscId]?.[serializedProps];const rscPath="RSC/"+rscId;const data=createFromFetch(prefetched||fetch(basePath+rscPath+"/"+searchParams),options);return[data,setRerender]});const ServerComponent=props=>{const serializedProps=JSON.stringify(props);const[data,setRerender]=fetchRSC(serializedProps);const[state,setState]=useState();useEffect(()=>setRerender(setState));let dataToReturn=data;if(state){if(state[1]===serializedProps){dataToReturn=state[0]}else{setState(undefined)}}return use(dataToReturn)};return ServerComponent}let mutationMode=0;export function mutate(fn){++mutationMode;fn();--mutationMode}